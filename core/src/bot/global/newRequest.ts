import bot from "..";
import { ApplicationData } from "../../types/Application";
import { Role } from "../../types/UserSchema";

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–æ–º–ø–∞–Ω–∏–∏.
 * –°–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –ø–æ —Ä–æ–ª–∏ (–¥–∏—Ä–µ–∫—Ç–æ—Ä / –º–µ–Ω–µ–¥–∂–µ—Ä).
 *
 * @param {Object} params
 * @param {{ chat_id: number; role: Role }[]} params.users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.
 * @returns {Promise<{ success: boolean; message?: string }>}
 */
export async function sendMessageAllUsers({
  users,
  data,
}: {
  users: { chat_id: number; role: Role }[];
  data: ApplicationData;
}): Promise<{ success: boolean; message?: string }> {
  if (!users || users.length === 0) {
    return { success: false, message: "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è." };
  }

  const parts: string[] = [`üîî <b>–ó–∞—è–≤–∫–∞ #1:</b>`];

  if (data.name) parts.push(`üë§ –ò–º—è: ${data.name}`);
  if (data.phone) parts.push(`üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}`);
  if (data.post) parts.push(`üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${data.post}`);
  if (data.address) parts.push(`üè¢ –ê–¥—Ä–µ—Å: ${data.address}`);
  if (data.message) parts.push(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}`);
  if (data.file) parts.push(`üìé –§–∞–π–ª: –í —Ç–µ—Å—Ç–æ–≤–æ–º –æ—Ç—Å—É—Å—Ç–≤—É–µ—Ç`);

  parts.push(
    "",
    `‚ÑπÔ∏è –ù–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ –¥–æ—Å—Ç—É–ø–Ω–æ 10 –∑–∞—è–≤–æ–∫ –≤ –º–µ—Å—è—Ü.`,
    `(–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è).`
  );

  const message = parts.join("\n");
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.allSettled –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    const results = await Promise.allSettled(
      users.map(
        (user, i) =>
          new Promise(
            (resolve) =>
              setTimeout(async () => {
                try {
                  await bot.telegram.sendMessage(user.chat_id, message);
                  resolve({ chat_id: user.chat_id, status: "sent" });
                } catch (err) {
                  console.error(
                    `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.chat_id}:`,
                    err
                  );
                  resolve({ chat_id: user.chat_id, status: "failed" });
                }
              }, i * 500) // —á—É—Ç—å –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º 1000–º—Å ‚Äî –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
          )
      )
    );

    const failed = results.filter(
      (r) => r.status === "fulfilled" && (r.value as any).status === "failed"
    );

    if (failed.length > 0) {
      return {
        success: false,
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${failed.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`,
      };
    }

    return { success: true };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
    return { success: false, message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π." };
  }
}
