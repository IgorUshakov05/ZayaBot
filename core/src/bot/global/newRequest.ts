import bot from "..";
import { Role } from "../../types/UserSchema";

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–æ–º–ø–∞–Ω–∏–∏.
 * –°–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –ø–æ —Ä–æ–ª–∏ (–¥–∏—Ä–µ–∫—Ç–æ—Ä / –º–µ–Ω–µ–¥–∂–µ—Ä).
 *
 * @param {Object} params
 * @param {{ chat_id: number; role: Role }[]} params.users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.
 * @returns {Promise<{ success: boolean; message?: string }>}
 */
export async function sendMessageAllUsers({
  users,
}: {
  users: { chat_id: number; role: Role }[];
}): Promise<{ success: boolean; message?: string }> {
  if (!users || users.length === 0) {
    return { success: false, message: "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è." };
  }

  const managerMessage = `üì® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞.`;
  const directorMessage = `üëî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–Ω–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞.`;

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.allSettled –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    const results = await Promise.allSettled(
      users.map((user, i) =>
        new Promise((resolve) =>
          setTimeout(async () => {
            try {
              await bot.telegram.sendMessage(
                user.chat_id,
                user.role === Role.director ? directorMessage : managerMessage
              );
              resolve({ chat_id: user.chat_id, status: "sent" });
            } catch (err) {
              console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.chat_id}:`, err);
              resolve({ chat_id: user.chat_id, status: "failed" });
            }
          }, i * 500) // —á—É—Ç—å –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º 1000–º—Å ‚Äî –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        )
      )
    );

    const failed = results.filter(
      (r) => r.status === "fulfilled" && (r.value as any).status === "failed"
    );

    if (failed.length > 0) {
      return {
        success: false,
        message: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${failed.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`,
      };
    }

    return { success: true };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
    return { success: false, message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π." };
  }
}
