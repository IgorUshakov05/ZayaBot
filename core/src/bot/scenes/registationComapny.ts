import path from "path";
import { Markup, Scenes, Context } from "telegraf";
import {
  createCompanyAndUser,
  delete_company,
} from "../../database/request/Company";
import { registrationCompany } from "../keyboards/registrationCompany";

interface RegistrationState {
  title?: string;
  domain?: string;
}

type MyContext = Context &
  Scenes.WizardContext & {
    wizard: Scenes.WizardContextWizard<MyContext> & {
      state: RegistrationState;
    };
    message?: { text?: string };
  };

// --- Middleware –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Ü–∏–∏ ---
const cancelMiddleware = async (ctx: MyContext) => {
  const text = ctx.message?.text;
  if (text === "‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é") {
    await ctx.reply(
      "üö´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
      Markup.removeKeyboard()
    );
    return ctx.scene.leave();
  }
  return false;
};

// --- –°—Ü–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
const registrationWizard = new Scenes.WizardScene<MyContext>(
  "registration",

  // --- –®–∞–≥ 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ ---
  async (ctx) => {
    if (await cancelMiddleware(ctx)) return;
    await ctx.reply(
      "üßæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!\n\n" +
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤:\n\n" +
        "1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏*:",
      {
        parse_mode: "Markdown",
        ...registrationCompany.cancel,
      }
    );
    return ctx.wizard.next();
  },

  // --- –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è ---
  async (ctx) => {
    if (await cancelMiddleware(ctx)) return;

    const title = ctx.message?.text?.trim();
    if (!title || title.length < 2) {
      await ctx.reply(
        "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
      );
      return;
    }

    ctx.wizard.state.title = await title;
    await ctx.reply(
      `–û—Ç–ª–∏—á–Ω–æ! "*${title}*" ‚Äî –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. üéâ\n\n` +
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: example.com):",
      {
        parse_mode: "Markdown",
        ...registrationCompany.cancel,
      }
    );

    return ctx.wizard.next();
  },

  // --- –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ ---
  async (ctx: any) => {
    if (await cancelMiddleware(ctx)) return;

    const domain = ctx.message?.text?.trim();
    if (!domain || !/^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(domain)) {
      await ctx.reply(
        "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –¥–æ–º–µ–Ω –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ example.com"
      );
      return;
    }

    ctx.wizard.state.domain = domain;
    let createCompany = await createCompanyAndUser({
      user: {
        user_tag: ctx.from?.username as string,
        name: ctx.from?.first_name as string,
        chat_id: ctx.from.id,
      },
      company: {
        domain: ctx.wizard.state.domain,
        title: ctx.wizard.state.title,
      },
    });
    if (!createCompany.success) {
      await ctx.reply(createCompany.message);
      return ctx.scene.leave();
    }
    ctx.wizard.state.api_key = await createCompany.company?.api_key;
    console.log(createCompany);
    await ctx.reply(
      `–î–æ–º–µ–Ω *${domain}* —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç! ‚úÖ\n\n` +
        "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:\n" +
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –ø—Ä–∏–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞.",
      {
        parse_mode: "Markdown",
        ...registrationCompany.finally,
      }
    );

    return ctx.wizard.next();
  },

  // --- –®–∞–≥ 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
  async (ctx: any) => {
    if (await cancelMiddleware(ctx)) return;
    const text = ctx.message?.text?.trim();
    console.log(ctx.wizard.state.api_key, " - –∞–ø–∏ –∫–ª—é—á");
    if (text === "üìÑ –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é PDF") {
      await ctx.reply(
        `üìå *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*
–í–∞—à API-–∫–ª—é—á: \`${ctx.wizard.state.api_key}\`
–ü–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ —Å–∞–π—Ç–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–º–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã. –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∑–∞ –Ω–∞—à —Å—á—ë—Ç! ‚úÖ`,
        {
          parse_mode: "Markdown",
          ...Markup.removeKeyboard(),
        }
      );
      await ctx.replyWithDocument({
        source: path.join(__filename),
        filename: "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è.pdf",
      });

      return ctx.scene.leave();
    }
    if (text === "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é") {
      let delete_request = await delete_company({ chat_id: ctx.from.id });
      console.log(delete_request);
      await ctx.reply(delete_request.message, {
        parse_mode: "Markdown",
        ...Markup.removeKeyboard(),
      });
      return ctx.scene.leave();
    }
  }
);

export default registrationWizard;
