import { Markup, Scenes, Context } from "telegraf";
import { createUser } from "../../database/request/User";
import { Role } from "../../types/UserSchema";
import {
  WizardContext,
  WizardContextWizard,
  WizardScene,
} from "telegraf/scenes";

interface RegistrationState {
  surname?: string;
  name?: string;
  code?: string;
}

type MyContext = Context &
  Scenes.WizardContext & {
    wizard: Scenes.WizardContextWizard<MyContext> & {
      state: RegistrationState;
    };
    message?: { text?: string };
  };

// --- Middleware –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
const cancelMiddleware = async (ctx: MyContext) => {
  const text = ctx.message?.text;
  if (text === "‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é") {
    await ctx.reply(
      "üö´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
      Markup.removeKeyboard()
    );
    return ctx.scene.leave();
  }
  return false;
};

const registrationManagerWizard = new Scenes.WizardScene<MyContext>(
  "registration_user",

  // –®–∞–≥ 1: –í–≤–æ–¥ –§–ò–û
  async (ctx: any) => {
    await cancelMiddleware(ctx);
    const code = ctx.scene.state.code;
    if (!code) {
      await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
      return ctx.scene.leave();
    }
    await ctx.reply(
      `üìù *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ *—Ñ–∞–º–∏–ª–∏—é* –∏ *–∏–º—è*. –ü—Ä–∏–º–µ—Ä: _–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤_`,
      {
        parse_mode: "Markdown",
        ...Markup.keyboard([["‚ùå –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"]]).resize(),
      }
    );

    return ctx.wizard.next();
  },

  // –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  async (ctx: any) => {
    await cancelMiddleware(ctx);

    const text = ctx.message?.text?.trim();
    if (!text || !text.includes(" ")) {
      await ctx.reply(
        "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: _–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤_",
        { parse_mode: "Markdown" }
      );
      return; // –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
    }

    const [surname, ...nameParts] = text.split(" ");
    const name = nameParts.join(" ");

    ctx.wizard.state.surname = surname;
    ctx.wizard.state.name = name;

    const code = ctx.scene.state.code;
    if (!code) {
      await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
      return ctx.scene.leave();
    }

    const result = await createUser({
      surname,
      name,
      role: Role.manager,
      chat_id: ctx.chat!.id,
      code,
      user_tag: ctx.from?.username || `id${ctx.from?.id}` || "unknown",
    });

    if (result.success) {
      await ctx.reply(result.message, Markup.removeKeyboard());
    } else {
      await ctx.reply(
        `‚ö†Ô∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${result.message}`,
        Markup.removeKeyboard()
      );
    }

    return ctx.scene.leave();
  }
);

export default registrationManagerWizard;
