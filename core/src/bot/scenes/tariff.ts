import { Markup, Scenes } from "telegraf";
import { create_pay } from "../../payment/payments.methods";
import { PaymentPlan, PaymentType, PricePlan } from "../../types/UserSchema";

interface TopupState {
  sum?: number;
}

type MyContext = Scenes.WizardContext & {
  wizard: Scenes.WizardContextWizard<MyContext> & {
    state: TopupState;
  };
  message?: { text?: string };
};

// --- Middleware –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ---
const cancelMiddleware = async (ctx: MyContext): Promise<boolean> => {
  const text = ctx.message?.text;
  if (text === "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ") {
    await ctx.reply(
      "üö´ –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
      Markup.removeKeyboard()
    );
    await ctx.scene.leave();
    return true;
  }
  return false;
};

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ---
const toggleTariffWizard = new Scenes.WizardScene<MyContext>(
  "enter_tariff",

  // –®–∞–≥ 2 ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ
  async (ctx: any) => {
    if (await cancelMiddleware(ctx)) return;

    let plan: PaymentPlan = ctx.scene.state.plan;
    if (plan === "START") {
      return ctx.scene.leave();
    }
    const { success, payment, message } = await create_pay(
      PricePlan[plan],
      ctx.chat.id,
      PaymentType.SUBSCRIPTION,
      plan
    );

    if (!success) {
      await ctx.reply(message, Markup.removeKeyboard());
      return ctx.scene.leave();
    }
    await ctx.reply(
      `üí≥ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:`,
      Markup.inlineKeyboard([
        [
          Markup.button.url(
            `–û–ø–ª–∞—Ç–∏—Ç—å ${PricePlan[plan]} ‚ÇΩ`,
            payment?.confirmation.confirmation_url
          ),
        ],
      ])
    );

    return ctx.scene.leave();
  }
);

export default toggleTariffWizard;
