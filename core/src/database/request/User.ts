import { ICompanySchema } from "../../types/CompanySchema";
import { ICreateManager } from "../../types/PropsFuntion";
import { Role } from "../../types/UserSchema";
import { Code } from "../schema/CodeSchema";
import { User } from "../schema/UserSchema";

export const createUser = async ({
  surname,
  name,
  role,
  chat_id,
  user_tag,
  code,
}: ICreateManager): Promise<{ success: boolean; message: string }> => {
  try {
    // 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞
    const searchCode = await Code.findOne({ code }).populate<ICompanySchema>(
      "company"
    );
    if (!searchCode) {
      return {
        success: false,
        message: "‚ùå –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.",
      };
    }

    // 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingUser = await User.findOne({ chat_id });
    if (existingUser) {
      return {
        success: false,
        message:
          "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.",
      };
    }

    // 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —É –∫–æ–¥–∞
    if (!searchCode.company) {
      return {
        success: false,
        message: "üè¢ –ö–æ–º–ø–∞–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –∫–æ–¥–æ–º, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
      };
    }

    // 4Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = new User({
      surname,
      user_tag,
      name,
      role,
      chat_id,
      company: searchCode.company._id,
      createdAt: new Date(),
    });
    await newUser.save();

    // 5Ô∏è‚É£ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî —É–¥–∞–ª—è–µ–º –∫–æ–¥ (—á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
    await Code.deleteOne({ _id: searchCode._id });

    // 6Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    return {
      success: true,
      message: `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, *${name} ${surname}*.\n–í–∞—à–∞ —Ä–æ–ª—å: *${role}*`,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return {
      success: false,
      message: "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    };
  }
};

export const checkUserRole = async ({
  chat_id,
}: {
  chat_id: number;
}): Promise<{
  success: boolean;
  newUser: boolean;
  role?: Role;
  test_company: boolean;
  api_key?: string;
  message: string;
}> => {
  try {
    const findUser = await User.findOne({ chat_id })
      .populate<{ company?: ICompanySchema }>("company")
      .lean();

    // 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    if (!findUser) {
      return {
        success: true,
        newUser: true,
        test_company: false,
        message:
          "‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
      };
    }

    // 2. –î–∏—Ä–µ–∫—Ç–æ—Ä –∏ –∫–æ–º–ø–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    if (findUser.role === Role.director && findUser.company?.test) {
      return {
        success: true,
        newUser: false,
        api_key: findUser.company.api_key,
        test_company: true,
        role: findUser.role,
        message:
          "‚ö†Ô∏è –í—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä, –Ω–æ –∫–æ–º–ø–∞–Ω–∏—è –ø–æ–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é!",
      };
    }

    // 3. –î–∏—Ä–µ–∫—Ç–æ—Ä —Å —Ä–∞–±–æ—á–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π
    if (findUser.role === Role.director) {
      return {
        success: true,
        newUser: false,
        test_company: false,
        role: findUser.role,
        message: `*${findUser.name}*, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá`,
      };
    }

    // 4. –ú–µ–Ω–µ–¥–∂–µ—Ä
    if (findUser.role === Role.manager) {
      return {
        success: true,
        newUser: false,
        test_company: false,
        role: findUser.role,
        message: `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏! –í–∞—à–∞ —Ä–æ–ª—å: ${findUser.role}${
          findUser.company ? `\n–ö–æ–º–ø–∞–Ω–∏—è: ${findUser.company.title}` : ""
        }`,
      };
    }

    // 5. –õ—é–±–∞—è –¥—Ä—É–≥–∞—è —Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–ª–∏–µ–Ω—Ç)
    return {
      success: true,
      newUser: false,
      test_company: false,
      role: findUser.role,
      message: `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏! –í–∞—à–∞ —Ä–æ–ª—å: ${findUser.role}`,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return {
      success: false,
      newUser: false,
      test_company: false,
      message: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    };
  }
};
