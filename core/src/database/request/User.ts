import { ICompanySchema } from "../../types/CompanySchema";
import { Role } from "../../types/UserSchema";
import { User } from "../schema/UserSchema";

export const checkUserRole = async ({
  chat_id,
}: {
  chat_id: number;
}): Promise<{
  success: boolean;
  newUser: boolean;
  role?: Role;
  test_company: boolean;
  api_key?: string;
  message: string;
}> => {
  try {
    const findUser = await User.findOne({ chat_id })
      .populate<{ company?: ICompanySchema }>("company")
      .lean();

    // 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    if (!findUser) {
      return {
        success: true,
        newUser: true,
        test_company: false,
        message:
          "‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
      };
    }

    // 2. –î–∏—Ä–µ–∫—Ç–æ—Ä –∏ –∫–æ–º–ø–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    if (findUser.role === Role.director && findUser.company?.test) {
      return {
        success: true,
        newUser: false,
        api_key: findUser.company.api_key,
        test_company: true,
        role: findUser.role,
        message:
          "‚ö†Ô∏è –í—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä, –Ω–æ –∫–æ–º–ø–∞–Ω–∏—è –ø–æ–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é!",
      };
    }

    // 3. –î–∏—Ä–µ–∫—Ç–æ—Ä —Å —Ä–∞–±–æ—á–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π
    if (findUser.role === Role.director) {
      return {
        success: true,
        newUser: false,
        test_company: false,
        role: findUser.role,
        message: `*${findUser.name}*, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá`,
      };
    }

    // 4. –ú–µ–Ω–µ–¥–∂–µ—Ä
    if (findUser.role === Role.manager) {
      return {
        success: true,
        newUser: false,
        test_company: false,
        role: findUser.role,
        message: `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏! –í–∞—à–∞ —Ä–æ–ª—å: ${findUser.role}${
          findUser.company ? `\n–ö–æ–º–ø–∞–Ω–∏—è: ${findUser.company.title}` : ""
        }`,
      };
    }

    // 5. –õ—é–±–∞—è –¥—Ä—É–≥–∞—è —Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–ª–∏–µ–Ω—Ç)
    return {
      success: true,
      newUser: false,
      test_company: false,
      role: findUser.role,
      message: `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏! –í–∞—à–∞ —Ä–æ–ª—å: ${findUser.role}`,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return {
      success: false,
      newUser: false,
      test_company: false,
      message: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    };
  }
};
