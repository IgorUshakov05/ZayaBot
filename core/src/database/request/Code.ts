import { Role } from "./../../types/UserSchema";
import { ICompanySchema } from "../../types/CompanySchema";
import { Code } from "../schema/CodeSchema";
import { User } from "../schema/UserSchema";

export const createCode = async ({
  chat_id,
  role,
}: {
  chat_id: number;
  role: Role;
}): Promise<{ success: boolean; message: string; code?: string }> => {
  try {
    const user = await User.findOne({ chat_id }).populate<{
      company: ICompanySchema;
    }>("company");

    if (!user) {
      return {
        success: false,
        message: "‚ùå –ê –≤—ã –∫—Ç–æ?",
      };
    }

    if (!user.company) {
      return {
        success: false,
        message:
          "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
      };
    }

    if (user.company.test) {
      return {
        success: false,
        message: `üö´ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–ø–∞–Ω–∏—è *${user.company.title}* —è–≤–ª—è–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–æ–π. 
–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–±–æ—á—É—é –∫–æ–º–ø–∞–Ω–∏—é.`,
      };
    }

    // –°–æ–∑–¥–∞—ë–º –∫–æ–¥
    const newCode = new Code({
      role,
      company: user.company._id,
    });

    await newCode.save();

    return {
      success: true,
      message: `‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ *${user.company.title}*!
–†–æ–ª—å: *${role}*
–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.`,
      code: newCode.code,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–¥–∞:", error);
    return {
      success: false,
      message:
        "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    };
  }
};
