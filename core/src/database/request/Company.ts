import { Company } from "./../schema/CompanySchema";
import { Types } from "mongoose";
import { User } from "../schema/UserSchema";
import { v4 as uuidv4 } from "uuid";
import { ICompanySchema } from "../../types/CompanySchema";
import IUser, { Role } from "../../types/UserSchema";

interface CreateCompanyParams {
  user: { user_tag: string; chat_id: number; name: string };
  company: { title: string; domain: string };
}
/**
 * –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º.
 *
 * @param {Object} params.user - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {string} params.user.user_tag - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
 * @param {number} params.user.chat_id - ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {string} params.user.name - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {Object} params.company - –î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏.
 * @param {string} params.company.title - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.
 * @param {string} params.company.domain - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–æ–º–µ–Ω –∫–æ–º–ø–∞–Ω–∏–∏.
 *
 * @returns {Promise<{success: boolean; message: string; company?: ICompanySchema; user?: any}>}
 * –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏.
 */
export async function createCompanyAndUser({
  user,
  company,
}: CreateCompanyParams) {
  try {
    const findUser = await User.findOne({ chat_id: user.chat_id });
    if (findUser) {
      return {
        success: false,
        message:
          "‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.",
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
    const existingCompany = await Company.findOne({
      domain: company.domain,
      test: true,
    });
    if (existingCompany) {
      return {
        success: false,
        message: `üö´ –ö–æ–º–ø–∞–Ω–∏—è —Å –¥–æ–º–µ–Ω–æ–º *${company.domain}* —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. 
–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
      };
    }

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
    const newCompany = await Company.create({
      title: company.title,
      test: true,
      domain: company.domain,
      users: [],
      api_key: uuidv4(),
    });

    // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º
    const newUser = await User.create({
      name: user.name,
      user_tag: user.user_tag,
      chat_id: user.chat_id,
      role: "director",
      company: newCompany._id,
    });

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–º–ø–∞–Ω–∏–∏
    newCompany.users.push(newUser._id as Types.ObjectId);
    await newCompany.save();

    return {
      success: true,
      message: `‚úÖ –ö–æ–º–ø–∞–Ω–∏—è *${newCompany.title}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n
üë§ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º.\nüåê –î–æ–º–µ–Ω: *${newCompany.domain}*`,
      company: newCompany,
      user: newUser,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return {
      success: false,
      message:
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –µ–≥–æ –∫–æ–º–ø–∞–Ω–∏—è.
 *
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≤–µ—Ä–∫–∏.
 * @param {number} params.chat_id - Telegram chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {string} params.messageSuccess - –°–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ.
 *
 * @returns {Promise<{success: boolean; message: string}>}
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
 */
export async function is_verefy_company_of_director({
  chat_id,
  messageSuccess,
}: {
  chat_id: number;
  messageSuccess: string;
}): Promise<{ success: boolean; message: string }> {
  try {
    const findUser = await User.findOne({ chat_id }).populate<ICompanySchema>(
      "company"
    );

    if (!findUser) {
      return {
        success: false,
        message:
          "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
      };
    }

    if (findUser.role !== Role.director) {
      return {
        success: false,
        message: "‚ö†Ô∏è –¢–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.",
      };
    }

    if (!findUser.company) {
      return {
        success: false,
        message:
          "üè¢ –ö –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è.\n\n" +
          "–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /create_company –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
      };
    }

    const company = findUser.company as unknown as ICompanySchema;

    if (!company.test === false) {
      return {
        success: false,
        message:
          "üïì –ö–æ–º–ø–∞–Ω–∏—è –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n" +
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
      };
    }

    return {
      success: true,
      message: messageSuccess,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ is_verefy_company_of_director:", error);
    return {
      success: false,
      message: "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    };
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∫–æ–º–ø–∞–Ω–∏—é –∏ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 *
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–¥–∞–ª–µ–Ω–∏—è.
 * @param {number} params.chat_id - Telegram chat ID –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∫–æ–º–ø–∞–Ω–∏–∏.
 * @param {boolean} params.test - –§–ª–∞–≥ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.
 *
 * @returns {Promise<{success: boolean; message: string}>}
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è.
 */
export async function delete_company({
  chat_id,
  test,
}: {
  chat_id: number;
  test: boolean;
}) {
  try {
    const findUser = await User.findOne({ chat_id }).populate("company");

    if (!findUser) {
      return {
        success: false,
        message: "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ",
      };
    }

    if (!findUser.company) {
      return {
        success: false,
        message: "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏.",
      };
    }

    if (findUser.role !== "director") {
      return {
        success: false,
        message:
          "üö´ –¢–æ–ª—å–∫–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
      };
    }

    const company = findUser.company as any;
    console.log(company);
    await User.deleteMany({ company: company._id });
    await Company.deleteOne({ _id: company._id, test });

    return {
      success: true,
      message: `‚úÖ –ö–æ–º–ø–∞–Ω–∏—è *${company.title}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.`,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏:", error);
    return {
      success: false,
      message:
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –ø–æ API-–∫–ª—é—á—É –∏ –¥–æ–º–µ–Ω—É.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç chat_id –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–æ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞.
 *
 * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞.
 * @param {string} params.api_key - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π API-–∫–ª—é—á –∫–æ–º–ø–∞–Ω–∏–∏.
 * @param {string} params.domain - –î–æ–º–µ–Ω –∫–æ–º–ø–∞–Ω–∏–∏.
 *
 * @returns {Promise<
 *   | { success: false; message: string }
 *   | { success: true; chat_ids: { role: Role; chat_id: number }[] }
 * >}
 */
export async function get_data_company_and_director({
  api_key,
  domain,
}: {
  api_key: string;
  domain: string;
}): Promise<
  | { success: false; error_message?: string }
  | {
      success: true;
      chat_ids: { role: Role; chat_id: number }[];
      count: number;
    }
  | {
      success: true;
      test: true;
      chat_id_director: number;
    }
> {
  try {
    console.log(api_key, domain);
    const company = await Company.findOne({ api_key, domain }).populate(
      "users"
    );

    if (!company) {
      return {
        success: false,
        error_message: "‚ùå –ö–æ–º–ø–∞–Ω–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
      };
    }

    const users = company.users as unknown as IUser[];
    const director = users.filter((user) => user.role === Role.director)[0];
    if (!users || users.length === 0) {
      return {
        success: false,
        error_message: "‚ö†Ô∏è –£ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
      };
    }

    const countApplication = company.applications.length;
    const chat_ids = users
      .filter((user) => user.mute === false)
      .map((user) => ({
        chat_id: user.chat_id,
        role: user.role,
      }));
    if (company.test === true) {
      company.test = false;
      await company.save();
      return { success: true, chat_id_director: director.chat_id, test: true };
    }

    return { success: true, chat_ids, count: countApplication };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ get_data_company_and_director:", error);
    return {
      success: false,
      error_message: "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏.",
    };
  }
}
